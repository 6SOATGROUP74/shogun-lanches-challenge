AWSTemplateFormatVersion: '2010-09-09'
Description: Template para criar um cluster EKS e uma instância RDS MySQL

Parameters:
  ClusterName:
    Type: String
    Default: shogun-cluster
    Description: Nome do cluster EKS
  NodeInstanceType:
    Type: String
    Default: t2.medium
    Description: Tipo de instância para os nós do cluster EKS
  DBName:
    Type: String
    Default: dbsoat
    Description: Nome do banco de dados MySQL
  DBUser:
    Type: String
    Default: admin
    Description: Usuário administrador do banco de dados MySQL
  DBPassword:
    Type: String
    NoEcho: true
    Description: Senha do banco de dados MySQL
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: Classe da instância RDS

Resources:
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds

  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeGroupRole.Arn
      Subnets: !Ref SubnetIds
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        DesiredSize: 2
        MinSize: 1
        MaxSize: 3

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acesso ao RDS MySQL
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group para o RDS
      SubnetIds: !Ref SubnetIds

Outputs:
  EKSClusterName:
    Description: Nome do cluster EKS
    Value: !Ref EKSCluster
  RDSInstanceEndpoint:
    Description: Endpoint do RDS MySQL
    Value: !GetAtt RDSDBInstance.Endpoint.Address